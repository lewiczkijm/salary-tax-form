{"version":3,"sources":["util.ts","components/NumberInput.tsx","components/Info.tsx","components/SalaryForm.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["separateMoneyValue","val","String","replace","NumberInput","props","input","onChange","value","useState","innerValue","setInnerValue","className","type","e","target","Info","show","setShow","fix","setFix","selectedIcon","setSelectedIcon","onMouseOver","onMouseOut","onClick","preventDefault","selector","formValueSelector","withReduxForm","reduxForm","form","salaryPayed","salaryGotten","NDFLCounted","handleSubmit","salaryCase","NDFL","sum","Number","onSubmit","console","log","Field","component","name","id","htmlFor","withConnect","connect","state","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","formReducer","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e355d39a.chunk.js","sourcesContent":["export const separateMoneyValue = (val:string| number)=>String(val).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n","import React, {useState} from \"react\";\r\nimport './NumberInput.scss'\r\nimport {separateMoneyValue} from \"../util\";\r\n\r\ninterface InputProps {\r\n    input:{\r\n        onChange:(value:string)=>void //React.ChangeEventHandler\r\n        value:string\r\n    }\r\n}\r\nconst NumberInput:React.FC<InputProps> = (props)=>{\r\n    let {onChange,value} = props.input;\r\n\r\n    const [innerValue ,setInnerValue] = useState(value);\r\n\r\n    function intercept(e: React.ChangeEvent) {\r\n         //@ts-ignore\r\n        let val:string = e.target.value;\r\n        val = val.replace(/[^0-9.]/g,'');\r\n\r\n        onChange(val);\r\n        setInnerValue(separateMoneyValue(val))\r\n    }\r\n    return(<input className=\"number-input\" type=\"text\" value={innerValue} onChange={intercept}/>)\r\n};\r\n\r\nexport default NumberInput","import React, {useState} from \"react\";\r\nimport \"./Info.scss\"\r\n\r\ninterface InfoProps {\r\n    value:string\r\n}\r\nconst Info:React.FC<InfoProps> = ({value}) =>{\r\n    const [show,setShow] = useState(false);\r\n    const [fix,setFix] = useState(false);\r\n    const [selectedIcon,setSelectedIcon] = useState(0);\r\n\r\n    const icons = ['i','x'];\r\n\r\n    const showInfo = ()=>{\r\n        setShow(true);\r\n    };\r\n    const hideInfo = ()=>{setShow(false)};\r\n\r\n    const click = (e:React.MouseEvent)=>{\r\n        e.preventDefault();\r\n        setFix(!fix);\r\n        setSelectedIcon((selectedIcon)?0:1)\r\n    };\r\n    return(\r\n        <div className=\"info\">\r\n            <div onMouseOver={showInfo} onMouseOut={hideInfo} onClick={click} className=\"icon\">\r\n                <span>{icons[selectedIcon]}</span>\r\n            </div>\r\n            {(show || fix) && <div className=\"banner\">\r\n                <div> </div>\r\n                <div>{value}</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Info;","import './SalaryForm.scss';\r\nimport React from \"react\";\r\nimport  {formValueSelector,Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport NumberInput from \"./NumberInput\";\r\nimport Info from \"./Info\";\r\nimport {separateMoneyValue} from \"../util\";\r\n\r\n\r\ninterface SalaryFormProps {\r\n    salaryCase?:string\r\n    NDFL?:string\r\n    sum?:string\r\n}\r\nconst SalaryForm:React.FC<InjectedFormProps> = (props) =>{\r\n    const {handleSubmit,salaryCase,NDFL,sum}: InjectedFormProps & SalaryFormProps = props;\r\n\r\n    const TAX = 13; // Ставка по НДФЛ\r\n\r\n    //\r\n    let salaryPayed:number,     // Выплачиваемая сумма\r\n        salaryGotten:number,    // Сумма на руки\r\n        NDFLCounted:number;     // Сумма налога\r\n\r\n    // Рассчет с НДФЛ\r\n    if(NDFL){\r\n        salaryGotten = Number(sum);\r\n        // Обратный процент\r\n        salaryPayed = ~~((salaryGotten * 100)/(100 - TAX));\r\n        NDFLCounted = ~~(salaryPayed - salaryGotten);\r\n    }\r\n    // Рассчет без НДФЛ\r\n    else{\r\n        salaryPayed = Number(sum) ;\r\n        NDFLCounted = ~~(salaryPayed * (TAX/100));\r\n        salaryGotten = ~~(salaryPayed - NDFLCounted);\r\n    }\r\n\r\n    return (\r\n            <form className={\"form-salary\"} onSubmit={handleSubmit(console.log)}>\r\n                <h3>Сумма</h3>\r\n                <div className=\"inputsBox\">\r\n                <div className=\"form-check\">\r\n                    <Field component={\"input\"} type=\"radio\" name=\"salaryCase\" id=\"exampleRadios1\"\r\n                           value=\"month\" />\r\n                        <label htmlFor=\"exampleRadios1\">\r\n                            Оклад за месяц\r\n                        </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <Field component={\"input\"} type=\"radio\" name=\"salaryCase\" id=\"exampleRadios2\"\r\n                           value=\"min\"/>\r\n                        <label  htmlFor=\"exampleRadios2\">\r\n                            МРОТ\r\n                        </label><Info value=\"МРОТ - минимальный размер оплаты труда. Разный для разных регионов\"/>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <Field component={\"input\"} type=\"radio\" name=\"salaryCase\" id=\"exampleRadios3\"\r\n                           value=\"day\"/>\r\n                        <label htmlFor=\"exampleRadios3\">\r\n                            Оплата за день\r\n                        </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <Field component={\"input\"} type=\"radio\" name=\"salaryCase\" id=\"exampleRadios4\"\r\n                           value=\"hour\"/>\r\n                        <label htmlFor=\"exampleRadios4\">\r\n                            Оплата за час\r\n                        </label>\r\n                </div>\r\n                </div>\r\n                <div className=\"inputsBox indented\"><label>Указать с НДФЛ\r\n                    <div className=\"custom-control custom-switch custom-switch-between\">\r\n                        <Field component=\"input\" type=\"checkbox\" name=\"NDFL\" className=\"custom-control-input\" id=\"customSwitch1\"/>\r\n                        <label className=\"custom-control-label\" htmlFor=\"customSwitch1\"> </label>\r\n                    </div>\r\n                    Без НДФЛ</label>\r\n                </div>\r\n                <div className=\"inputsBox indented\">\r\n                    <Field name=\"sum\" component={NumberInput} type=\"text\" id=\"sum\"/><label className=\"r\" htmlFor=\"sum\">c</label>\r\n                </div>\r\n\r\n                {salaryCase === \"month\" && sum &&\r\n                <div className=\"tax-computed\">\r\n                    <p><span className=\"money-value\">{separateMoneyValue(salaryGotten)}<span className=\"r\">c</span></span> сотрудник будет получать на руки</p>\r\n                    <p><span className=\"money-value\">{separateMoneyValue(NDFLCounted)}<span className=\"r\">c</span></span> НДФЛ, 13% от оклада</p>\r\n                    <p><span className=\"money-value\">{separateMoneyValue(salaryPayed)}<span className=\"r\">c</span></span> за сотрудника в месяц</p>\r\n                </div>}\r\n            </form>\r\n\r\n    )\r\n};\r\nconst selector = formValueSelector(\"salary\");\r\nconst withReduxForm = reduxForm({form:'salary'})(SalaryForm);\r\nconst withConnect = connect(\r\n    (state)=> selector(state, 'salaryCase','NDFL','sum')\r\n)(withReduxForm);\r\nexport default withConnect","import React from \"react\";\nimport SalaryForm from \"./components/SalaryForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SalaryForm/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {combineReducers, createStore} from \"redux\";\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { reducer as formReducer } from 'redux-form'\n\nconst rootReducer = combineReducers({form:formReducer});\nconst store = createStore(\n    rootReducer\n    ,composeWithDevTools());\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\nexport type RootState = ReturnType<typeof rootReducer>\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}